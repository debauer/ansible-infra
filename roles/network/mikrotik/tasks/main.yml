---
#- name: set dhcp range
#  routeros_command:
#    commands: /ip pool set [find name={{ hostvars[inventory_hostname].dhcp.pool }}]
#      range={{ hostvars[inventory_hostname].dhcp.range }}
#
#
#- name: set dhcp networks
#  routeros_command:
#    commands: :if ([:put [:len [/ip dhcp-server network find address="{{ item.address }}"]]] >0) do={/ip dhcp-server network set [find address="{{ item.address }}"] address={{ item.address }} dns-server={{ item.dns }} gateway={{ item.gateway }} domain={{ item.domain }}} else={/ip dhcp-server network add address={{ item.address }} dns-server={{ item.dns }} gateway={{ item.gateway }} domain={{ item.domain }}}
#  with_items: "{{ hostvars[inventory_hostname].dhcp.networks }}"

- name: create dns commands
  mikrotik_dns_commands:
    hostvars: "{{ hostvars }}"
    hosts: "{{ groups['all'] }}"
  register: dns_list
  tags: dns

- debug:
    var: dns_list["list"]
  tags: dns

- name: dns setup
  block:
  - name: remove all static dns entries
    routeros_command:
      commands: /ip dns static remove [find]
  - name: add static dns entries
    routeros_command:
      commands: "{{ dns_list['list'] }}"
  - name: add additional dns entry's
    include_tasks: fqdn.yml 
    vars:
      hostname: "{{ hostname_str }}"
    with_items: "{{ groups['all'] }}"
    loop_control:
      loop_var: hostname_str
    when: hostvars[hostname_str].fqdn is defined
  when: update_dns
  tags: dns


- name: add static dhcp lease
  routeros_command: 
    commands: :if ([:put [:len [/ip dhcp-server lease find mac-address="{{hostvars[item].mac}}" dynamic=no]]] >0) do={/ip dhcp-server lease set [find mac-address="{{hostvars[item].mac}}"] address={{ hostvars[item].ip }}} else={/ip dhcp-server lease add address={{ hostvars[item].ip }} mac-address={{hostvars[item].mac}} server={{hostvars[inventory_hostname].dhcp.name }} use-src-mac=yes}
  with_items: "{{ groups['all'] }}"
  when: hostvars[item].ip is defined and hostvars[item].mac is defined and update_dhcp_leases
  tags: dhcp