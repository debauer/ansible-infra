---
- ansible.builtin.debug:
    msg: "{{ project }}"
  tags: debug
- name: install packages [{{ project.name }}]
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ project.system_packages | d([]) }}"

- name: install python packages [{{ project.name }}]
  pip:
    name: "{{ item }}"
    state: present
  with_items: "{{ project.pip_packages | d([]) }}"

- name: create user with sudo [{{ project.name }}]
  user:
    name: "{{ project.user }}"
    home: /home/{{ project.user }}
    groups: wheel
    shell: /bin/bash
    system: true
    state: present
  when: project.user_need_sudo is defined 

- name: create user [{{ project.name }}]
  user:
    name: "{{ project.user }}"
    home: /home/{{ project.user }}
    shell: /bin/bash
    system: true
    state: present
  when: not project.user_need_sudo is defined 

- ansible.builtin.debug:
    msg: "{{ project }}"
  tags: debug

- name: setup git repo [{{ project.name }}]
  git:
    repo: "{{ project.url }}"
    dest: /home/{{ project.user }}/{{ project.name }}
    version: '{{ project.branch | d("main") }}'
    update: "{{ project.update_repo | d(true) }}"
  when: project.url is defined
  become: true
  become_user: "{{ project.user }}"

- name: make dir .config/pypoetry
  file:
    path: /home/{{ project.user }}/.config/pypoetry
    state: directory
    owner: "{{ project.user }}"
    group: "{{ project.user }}"
    mode: "0755"

- name: Copy poetry config to server
  ansible.builtin.template:
    src: pypoetry.j2
    dest: /home/{{ project.user }}/.config/pypoetry/config.toml
    owner: "{{ project.user }}"
    group: "{{ project.user }}"
    mode: "0755"
  become: true

- name: install poetry [{{ project.name }}]
  include_tasks: poetry.yml 
  vars:
    user: "{{ project_user }}"
  with_items: "{{ project.user  }}"
  loop_control:
    loop_var: project_user

- name: run poetry install [{{ project.name }}]
  shell: /home/{{ project.user }}/.local/bin/poetry install
  args:
    chdir: /home/{{ project.user }}/{{ project.name }}
  become: true
  become_user: "{{ project.user }}"

- name: copy systemd service file [{{ project.name }}]
  copy:
    remote_src: true
    src: /home/{{ project.user }}/{{ project.name }}/{{ project.name }}.service
    dest: /etc/systemd/system/{{ project.name }}.service

- name: enable service and start it [{{ project.name }}]
  systemd:
    name: "{{ project.name }}"
    state: restarted
    enabled: true
    daemon_reload: true
